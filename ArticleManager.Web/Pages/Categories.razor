@page "/categories"
@inherits ArticleManager.Web.Pages.Base.ApplicationComponentBase
@inject ICRUDService<Category> service;

<h3>Categories</h3>

<div class="mt-3">
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">
            @error
        </div>
    }

    @if (currentCategory == null)
    {
        <ItemList TItem="Category"
                Model="listModel"
                OnAdd="AddCategory"
                OnEdit="EditCategory"
                OnDelete="DeleteCategory">
        </ItemList>
    }
    else
    {
        <CategoryForm Category="currentCategory"
                        OnSave="SaveCategory"
                        OnCancel="RefreshCategories">
        </CategoryForm>
    }
</div>

@code {
    private ItemListModel<Category> listModel = new ItemListModel<Category> 
    {
            ItemName = "Category",
            Headers = new[] { nameof(Category.Id), nameof(Category.Name) },
            Items = new Category[0]
    };

    private Category currentCategory;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await RefreshCategories();
    }

    public async Task RefreshCategories()
    {
        listModel.Items = (await service.GetAll()).ToArray();
        this.currentCategory = null;
    }

    public void AddCategory()
    {
        this.currentCategory = new Category();
    }

    public async Task EditCategory(Category item)
    {
        this.currentCategory = await service.Get(item.Id);
    }

    public async Task SaveCategory(Category item)
    {
        try
        {
            if (currentCategory.Id == 0)
                await service.Create(currentCategory);
            else
                await service.Update(currentCategory);

            await this.RefreshCategories();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }

    public async Task DeleteCategory(Category item)
    {
        try
        {
            await service.Delete(item.Id);
            await this.RefreshCategories();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
}
