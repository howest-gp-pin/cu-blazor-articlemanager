@page "/categories"
@inherits ArticleManager.Web.Pages.Base.ApplicationComponentBase
@inject ICRUDService<Category> service;

<h3>Categories</h3>

<div class="mt-3">
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">
            @error
        </div>
    }

    @if (currentCategory.Item == null)
    {
        <ItemList TItem="Category"
                Model="listModel"
                OnAdd="AddCategory"
                OnEdit="EditCategory"
                OnDelete="DeleteCategory">
        </ItemList>
    }
    else
    {
        <ItemDetails TItem="Category"
                    Model="currentCategory"
                    OnSave="SaveCategory"
                    OnCancel="RefreshCategories">
            <FieldsTemplate Context="category">
                <div class="form-group">
                    <label for="name">Name: </label>
                    <InputText id="name" class="form-control"
                            @bind-Value="category.Name" />
                    <ValidationMessage For="@(() => category.Name)" />
                </div>

                <div class="form-group">
                    <label for="description">Description: </label>
                    <InputTextArea id="description" class="form-control"
                               @bind-Value="category.Description" />
                </div>
            </FieldsTemplate>
        </ItemDetails>
    }
</div>

@code {
    private ItemListModel<Category> listModel = new ItemListModel<Category> 
    {
            ItemName = "Category",
            Headers = new[] { nameof(Category.Id), nameof(Category.Name) },
            Items = new Category[0]
    };

    private ItemDetailsModel<Category> currentCategory = new ItemDetailsModel<Category>
    {
        ItemName = "Category"
    };

    private string error;

    protected override async Task OnInitializedAsync()
    {
        await RefreshCategories();
    }

    public async Task RefreshCategories()
    {
        listModel.Items = (await service.GetAll()).ToArray();
        this.currentCategory.Item = null;
    }

    public void AddCategory()
    {
        this.currentCategory.Item = new Category();
    }

    public async Task EditCategory(Category item)
    {
        this.currentCategory.Item = await service.Get(item.Id);
    }

    public async Task SaveCategory(Category item)
    {
        try
        {
            if (currentCategory.Item.Id == 0)
                await service.Create(currentCategory.Item);
            else
                await service.Update(currentCategory.Item);

            await this.RefreshCategories();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }

    public async Task DeleteCategory(Category item)
    {
        try
        {
            await service.Delete(item.Id);
            await this.RefreshCategories();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
}
